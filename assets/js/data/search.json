[ { "title": "在unity的hierarchy面板上添加鼠标右键菜单", "url": "/game-tech-post/posts/%E5%9C%A8Unity%E7%9A%84Hierarchy%E9%9D%A2%E6%9D%BF%E4%B8%8A%E6%B7%BB%E5%8A%A0%E9%BC%A0%E6%A0%87%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95/", "categories": "UnityEditor", "tags": "Unity, 编辑器, Hierarchy, 右键菜单", "date": "2021-05-25 00:00:00 +0800", "snippet": "在Unity的Hierarchy面板上添加右键菜单这里添加的是复制一个模型的节点信息的功能，从子节点自身开始复制，一直到模型的父节点终止。因为有时候模型的子节点比较多，一个一个的去点开查找比较麻烦，或者想查看子节点的路径对不对。记得priority要写。代码如下：public static class EditorTool{ [MenuItem(&quot;GameObject/EditorTool/CopyPath&quot;, priority = 0)] static string CopyPath() { if (Selecti..." }, { "title": "烘培场景中的光", "url": "/game-tech-post/posts/%E7%83%98%E5%9F%B9%E5%9C%BA%E6%99%AF%E4%B8%AD%E7%9A%84%E5%85%89/", "categories": "shader", "tags": "U3D, Shader, Cookbook, 中文版", "date": "2021-05-21 00:00:00 +0800", "snippet": "烘培场景中的光渲染光照的过程是非常消耗新能的。即使是目前最好的[state-of-the-art]1GPU，要准确的计算光的运动(light transport) [是指光在物体表面之间反射]也要花好些小时。 为了在游戏中让这个过程可行，光的实时渲染是必须要有的。如今的游戏引擎会在画面和效率上采取一个合理的折中方案；大部分的计算都在一个叫光烘焙(light baking)过程中事先计算好了。这一个知识点将会讲解光烘焙是如何工作的并且你该如何充分的利用它。 始前准备 光的烘焙需要你先准备一个场景。里面要有一些几何体，当然光也一定要有。这个知识点我们会基于Unity的标准特性..." }, { "title": "Unity 5.x shaders and effects cookbook中文版翻译（第二版）", "url": "/game-tech-post/posts/Unity-5.x-Shaders-and-Effects-Cookbook%E4%B8%AD%E6%96%87%E7%89%88%E7%BF%BB%E8%AF%91-%E7%AC%AC%E4%BA%8C%E7%89%88/", "categories": "shader", "tags": "U3D, Shader, Cookbook, 中文版", "date": "2021-05-21 00:00:00 +0800", "snippet": "​ 我打算试着翻译这本技术书，目的又两个，1.希望自己能帮助英文不太好的朋友，2.希望自己也学到这些知识，顺便帮助自己提升英语水平。我英语水平不是很好，接下来如果有什么错误的地方，有看到的朋友还请帮忙纠正。我不会web前端技术，我想试着学学markdown语法，尽量让页面好看些但是最重要的还是内容。Unity 5.x Shaders and Effects Cookbook中文版（第二版）目录表鸣谢关于作者www.PacktPub.com 电子书, 优惠, 还有其他 为什么需要订阅? 前言 这本书包含哪些内容 学习的过程中你需要准备的 ..." }, { "title": "创建镜子和反射面", "url": "/game-tech-post/posts/%E5%88%9B%E5%BB%BA%E9%95%9C%E5%AD%90%E5%92%8C%E5%8F%8D%E5%B0%84%E9%9D%A2/", "categories": "shader", "tags": "U3D, Shader, Cookbook, 中文版", "date": "2021-05-17 00:00:00 +0800", "snippet": "创建镜子和反射面当我们从一定的角度看高光材质物体时，物体会反射光。然而可惜的是，即使是最精确的光照模型之一：菲涅尔反射Fresnel reflection，也不能完全准确的反射来自周围物体的光。前一个章节验证过的光照模型只考虑了一些光源，但是却忽略了来自其他表面的反射光。很显然，用目前我们学的关于着色的知识，来创建一面镜子是不可能的。但是全局光照Global illumination技术提供了这种可能性，这需要提供包含了周围光照信息的PBR着色器。 这就要求物体不仅需要有高光部分，还需要有依赖周围其他物体的真实的反射部分。实时的反射非常消耗性能并且需要一些自定义的设置和调整才能工作，它们..." }, { "title": "向pbr中添加透明度", "url": "/game-tech-post/posts/%E5%90%91PBR%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%80%8F%E6%98%8E%E5%BA%A6/", "categories": "shader", "tags": "U3D, Shader, Cookbook, 中文版", "date": "2021-03-15 00:00:00 +0800", "snippet": "向PBR中添加透明度透明度是游戏中很重要的一个方面，标准着色器支持三种不同的实现方式。 如果你想让你的材质获得很逼真的透明或者半透明属性，这个知识点非常有用。玻璃，玻璃瓶子，玻璃窗和各种结晶体都很适合PBR透明着色器。这是因为你依然可以获得PBR带来的包含透明和半透明的效果的逼真效果。 如果你想让UI或者像素艺术这样的不同的东西也具有半透明效果，这里由更加高效的可选方法，就是在第二章 表面着色器和纹理贴图 这一章节中，创建一个带透明度的材质 这个知识点。注意为了能获得一个有透明度的标准材质，仅仅是修改它的Albedo颜色属性的alpha通道是不够的。除非你把Rendering Mode设..." }, { "title": "Unity 5中基于物理原理的渲染", "url": "/game-tech-post/posts/Unity-5%E4%B8%AD%E5%9F%BA%E4%BA%8E%E7%89%A9%E7%90%86%E5%8E%9F%E7%90%86%E7%9A%84%E6%B8%B2%E6%9F%93/", "categories": "shader", "tags": "U3D, Shader, Cookbook, 中文版", "date": "2021-03-15 00:00:00 +0800", "snippet": "Unity 5中基于物理原理的渲染基于物理原理的渲染physically-based rendering是Unity5中加入的最大的变化之一，也就是我们常说的PBR。前面的一些章节重复提到过它但是没有却没向大家过多的展现。如果你不仅想知道PBR的工作原理，还想搞明白如何构建它们，那么这一张正是你需要阅读的。在这一章，你将会学习下面的几个知识点： 理解金属质感的设置 向PBR中添加透明度 创建镜子和反射面 烘培场景中的光 介绍 我们在第三章，理解光照模型 中介绍了所有的光照模型，简单的讨论了一下光是如何表现的。在编写它们的时候效率efficiency是最重要的方..." }, { "title": "创建各向异性类型的高光反射着色器", "url": "/game-tech-post/posts/%E5%88%9B%E5%BB%BA%E5%90%84%E5%90%91%E5%BC%82%E6%80%A7%E7%B1%BB%E5%9E%8B%E7%9A%84%E9%AB%98%E5%85%89%E5%8F%8D%E5%B0%84%E7%9D%80%E8%89%B2%E5%99%A8/", "categories": "shader", "tags": "U3D, Shader, Cookbook, 中文版", "date": "2021-02-26 00:00:00 +0800", "snippet": "创建各向异性类型的高光反射着色器各向异性(Anisotropic)类型可以用来模拟高光或者反射，常用于表面凹槽的方向和高光在垂直方向上的扭曲形变。当你想模拟金属抛光表面的时候这种类型的着色器就会非常有用，因为这种表面并不干净，光滑和明亮。 你可以想象当你看CD或者VCD光盘的数据那面时的高光或者底面被打磨过的金属盘子和盆子。 当你仔细检查这些表面的时候你会发现，表面的这些沟纹是有方向的，通常就是被抛光的方向。当你对这样的表面应用高光时，在垂直方向上会被扭曲。这个知识点中我们会向你介绍不同的抛光表面高光概念。在将来的一些知识点中，我们会探索如何使用这个知识点介绍的一些概念来获得一些类似于头..." }, { "title": "创建一个phong镜面类型的高光反射着色器", "url": "/game-tech-post/posts/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAPhong%E9%95%9C%E9%9D%A2%E7%B1%BB%E5%9E%8B%E7%9A%84%E9%AB%98%E5%85%89%E5%8F%8D%E5%B0%84%E7%9D%80%E8%89%B2%E5%99%A8/", "categories": "shader", "tags": "U3D, Shader, Cookbook, 中文版", "date": "2021-02-25 00:00:00 +0800", "snippet": "创建一个Phong类型类型的高光反射着色器一个物体表面的高光，可以简单的理解为它表面的亮度。这种类型的着色器常用于视野特效(view-dependent effects)。这是因为 为了在着色器中获得贴近现实的高光效果，你需要考虑到摄像机和人的朝向因素。而Phong高光效果是最基础和性能较好的一种着色器效果。它根据人的朝向和光的反射方向，通过计算获得一个有方向的反射。 在应用程序中，这种高光模型非常常见，涵盖游戏行业到电影等产业。虽然它在高光反射模型的精确度上不是最接近现实的，但是在大多数情况下，它大致都能满足而且性能不赖。此外，如果你的游戏对象离摄像机很远，就没有必要在提供准确的高光，..." }, { "title": "创建 blinnphong 类型的高光反射着色器", "url": "/game-tech-post/posts/%E5%88%9B%E5%BB%BA-BlinnPhong-%E7%B1%BB%E5%9E%8B%E7%9A%84%E9%AB%98%E5%85%89%E5%8F%8D%E5%B0%84%E7%9D%80%E8%89%B2%E5%99%A8/", "categories": "shader", "tags": "U3D, Shader, Cookbook, 中文版", "date": "2021-02-25 00:00:00 +0800", "snippet": "创建 BlinnPhong 类型的高光反射着色器Blinn是另一种计算和模拟高光的更有效的方法。它只要视角方向和光线方向向量的中间向量就可以计算出来。这个高光是Jim Blinn带入到Cg世界中的。 他发现比起计算反射向量来，只要中间向量的效率更好。它减少了代码量和处理时间。 如果你在UnityCG.cginc文件中查看了Unity内建的BlinnPhong光照模型的话，它也是用了中间向量，因此它被命名为BlinnPhong 。它只是完整Phong光照计算中的一种简单的版本。 始前准备 让我们按照下面的步骤开始学习这个知识点： 这次我们不创建新的场景，就..." }, { "title": "创建一个toon风格的着色器", "url": "/game-tech-post/posts/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAToon%E9%A3%8E%E6%A0%BC%E7%9A%84%E7%9D%80%E8%89%B2%E5%99%A8/", "categories": "shader", "tags": "U3D, Shader, Cookbook, 中文版", "date": "2021-02-23 00:00:00 +0800", "snippet": "创建一个Toon风格的着色器Toon着色器(toon shading)是游戏中最常使用的效果之一，也被称作(AKA)cel shading(cel是celluloid的缩写[中文也叫 赛璐珞])。它是一种非真实渲染技术，可以让3D模型呈现一种平面效果。许多游戏中用这种着色器把3D的物体渲染成一种手绘物体的效果。下图中你能看到这两者的区别，右边的是标准着色器，左边的是Toon着色器：如果只使用表面函数(surface functions)虽然也能获得这样的效果，但是花费性能和时间的代价太大了。表面函数仅仅对材质的属性起作用，而对材质的具体光照环境无能为力。因为toon着色器需要改变光的反射..." }, { "title": "理解光照模型", "url": "/game-tech-post/posts/%E7%90%86%E8%A7%A3%E5%85%89%E7%85%A7%E6%A8%A1%E5%9E%8B/", "categories": "shader", "tags": "U3D, Shader, Cookbook, 中文版", "date": "2021-02-22 00:00:00 +0800", "snippet": "理解光照模型在前面的那些章节中，我们介绍了表面着色器并且还理解了如何修改一些物理属性(比如Albedo和Specular)来模拟不同的材质。这些到底是如何工作的呢？每个表面着色器中最重要的部分一一光照模型lighting model。它的功能就是接受这些参数然后计算每一个像素点的最终着色。Unity通常会对开发者隐藏这部分，因为如果想要编写一个光照模型的话，你就必须要去理解光在物体表面是如何反射和折射的。这个章节中我们会毫无保留的向你展示光照模型是如何工作的，并且给你介绍一些你自己创建光照模型所需要的一些基础知识。这一章中，我们会学习下面所列的知识点： 创建一个自定义的漫反射光照模型 ..." }, { "title": "在地形的表面绘制一个圆", "url": "/game-tech-post/posts/%E5%9C%A8%E5%9C%B0%E5%BD%A2%E7%9A%84%E8%A1%A8%E9%9D%A2%E7%BB%98%E5%88%B6%E4%B8%80%E4%B8%AA%E5%9C%86/", "categories": "shader", "tags": "U3D, Shader, Cookbook, 中文版", "date": "2021-01-16 00:00:00 +0800", "snippet": "在地形的表面绘制一个圆在很多的RTS类型的游戏中，通过围绕被选中的单位绘制一个圆圈来表示距离（攻击范围，可移动距离，视野等等）。如果地面是平坦的，那么可以用通过对一张绘制有圆圈的矩形纹理进行缩放就能简单的做到。但是如果地面并不平坦，那么这个矩形的纹理就很有可能被高出的山丘或者其他几何物体遮住。接下来的知识点将展示如何编写一个着色器，让你可以在任何复杂的物体表面绘制一个圆圈[且不会被遮住]。如果你想对这个圆圈移动或者执行动画，那么我们就需要有着色器和C#代码才行。下图展示了用着色器在一个丘陵地形中绘制一个圆圈的例子： 始前准备 这里的着色器主要是用于地形的，对于其他的游戏对..." }, { "title": "纹理的压缩和混合", "url": "/game-tech-post/posts/%E7%BA%B9%E7%90%86%E7%9A%84%E5%8E%8B%E7%BC%A9%E5%92%8C%E6%B7%B7%E5%90%88/", "categories": "shader", "tags": "U3D, Shader, Cookbook, 中文版", "date": "2021-01-14 00:00:00 +0800", "snippet": "纹理的压缩和混合纹理的作用并不仅仅只是我们通常认为的保存加载的数据或者像素颜色，同时还有像素点在x和y方向以及RGBA通道的各种设置。我们能把多张图片压缩进一张单独的RGBA纹理中并且使用它们各自的R，G，B和A元素，因为我们可以在着色器中把它们各自纹理中的这些元素分别解压出来。将各自的灰度图压缩进一张单独的RGBA纹理的结果可以通过下图看出来：为什么说这会有用呢？在你的应用程序实际消耗的大部分中内存当中，贴图占了很大的一部分。所以如果你想要减少应用程序的大小的话，我们能在着色器中查看所有使用的图片并且想想我们是否能将这些纹理合并到一张单独的纹理中。任何灰度的纹理都可以压缩进另一张有RG..." }, { "title": "创建一个有全息效果的着色器", "url": "/game-tech-post/posts/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%9C%89%E5%85%A8%E6%81%AF%E6%95%88%E6%9E%9C%E7%9A%84%E7%9D%80%E8%89%B2%E5%99%A8/", "categories": "shader", "tags": "U3D, Shader, Cookbook, 中文版", "date": "2021-01-13 00:00:00 +0800", "snippet": "创建一个有全息效果的着色器近些年来太空主题的发行的越来越多。科幻游戏中很重要的一个部分就是在游戏中集合了来自未来的各种技术。全息投影就是其中的典型代表。全息投影尽管有很多种形式，但是通常用一种半透明，看起来很薄的投影来呈现。这次的这个知识点将会向你展示如何创建一个这样的着色器来模拟这样的效果。我们首先想到：要创建一个优秀的全息投影特效，你需要能够添加噪音，扫描动画和和震动。下图就展示了一个全息投影效果的列子： 始前准备 正如全息投影效果展示的知识物体的轮廓，所以我们可以把我们的这个着色器命名成Silhouette[轮廓的意思]。把它跟材质关联起来并且把它应用到你的3D模型..." }, { "title": "创建一个带透明度的材质", "url": "/game-tech-post/posts/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%B8%A6%E9%80%8F%E6%98%8E%E5%BA%A6%E7%9A%84%E6%9D%90%E8%B4%A8/", "categories": "shader", "tags": "U3D, Shader, Cookbook, 中文版", "date": "2021-01-12 00:00:00 +0800", "snippet": "创建一个带透明度的材质到目前为止我们所看到的着色器似乎都有一个共同点——它们都用于了固体材质。如果你想要的提升你的游戏的视觉效果，那么带透明度的材质通常是一个好的开始。它们用途广泛，从火焰效果到窗户的玻璃都会用到它们。但稍微麻烦的是，它们用起来要复杂一点点。在渲染固体模型之前，Unity会根据它们离摄像机的距离(这个叫Z ordering)进行排序，并且跳过渲染所有背朝摄像机的三角面(这个是剔除技术culling)。当渲染带透明度的几何物体时，这些含有两个面的几何物体就会产生问题。这次的知识点将会为你展示：当我们创建有透明度的表面着色器时，我们如何解决这个过程中产生的这些问题。我们在第六..." }, { "title": "通过改变uv值来移动贴图", "url": "/game-tech-post/posts/%E9%80%9A%E8%BF%87%E6%94%B9%E5%8F%98UV%E5%80%BC%E6%9D%A5%E7%A7%BB%E5%8A%A8%E8%B4%B4%E5%9B%BE/", "categories": "shader", "tags": "U3D, Shader, Cookbook, 中文版", "date": "2021-01-09 00:00:00 +0800", "snippet": "通过改变UV值来移动纹理在当惊的游戏产业中，一个很常见的游戏纹理技术就是允许你对游戏物体表面的纹理进行滚动。这种技术可以让你创建很多效果，比如瀑布，河流，流动的沿江等等。同时这些技术也是制作动画精灵特效的基础，我们会在这一章节的一系列知识点中来讲解这些内容。 首先，让我们来看看在表面着色器(SurfaceShader)如何创建一个简单的纹理滚动效果。 始前准备 在这个知识点开始之前，需要你创建一个新的着色器文件和材质。这么做的目的是为了有个干净的着色器，然后我们可以更加方便的学习和观看滚动效果。 操作步骤 闲话少说，我们打开刚才创建的的着色器[着色器的..." }, { "title": "法线贴图", "url": "/game-tech-post/posts/%E6%B3%95%E7%BA%BF%E8%B4%B4%E5%9B%BE/", "categories": "shader", "tags": "U3D, Shader, Cookbook, 中文版", "date": "2021-01-09 00:00:00 +0800", "snippet": "法线贴图3D模型的每一个三角面都有一个朝向facing direction，这个朝向就是它向前的指向。它通常用一个垂直并且放置在三角面正中心的一个箭头来表示。这个朝向对于光在表面反射中来说非常的重要。如果相邻的两个三角面朝向不同的方向，那么它们对光的反射也会朝向不同的角度，也就是在着色器中它们的处理方式会不一样。对于曲面物体来说，这里有个疑问：很显然这些拥有曲面的几何体仍然是由平面三角形构成的，那光线改如何处理？为了避免这个问题，对应三角面的光的反射计算方式此时不根据它的朝向计算，而是根据它的法线方向normal direction方向计算。前面向着色器添加纹理那个知识点讲到，顶点是保存..." }, { "title": "在layabox中使用unity中的导航网格，实现ai自动寻路", "url": "/game-tech-post/posts/%E5%9C%A8LayaBox%E4%B8%AD%E4%BD%BF%E7%94%A8Unity%E4%B8%AD%E7%9A%84%E5%AF%BC%E8%88%AA%E7%BD%91%E6%A0%BC-%E5%AE%9E%E7%8E%B0AI%E8%87%AA%E5%8A%A8%E5%AF%BB%E8%B7%AF/", "categories": "LayaBox", "tags": "U3D, LayaBox, NavMesh, 自动寻路", "date": "2021-01-07 00:00:00 +0800", "snippet": "在LayaBox中使用Unity的导航网格，实现AI自动寻路使用这个这个库的好处在于，你不必了解AStar算法，一样可以使用AStar算法来进行AI导航。只需要调用接口即可。下面我给出LayaBox的示例项目地址和Unity导出网格示例项目地址，各位按需克隆下来即可Unity示例项目：https://github.com/linkliu/ExportNavMeshLayaBox示例项目：https://github.com/linkliu/LayaNavMesh原始的教程在http://ask.layabox.com/question/47899这里，大家可以去看看这里也行这次的实例会从..." }, { "title": "向着色器添加纹理", "url": "/game-tech-post/posts/%E5%90%91%E7%9D%80%E8%89%B2%E5%99%A8%E6%B7%BB%E5%8A%A0%E7%BA%B9%E7%90%86/", "categories": "shader", "tags": "U3D, Shader, Cookbook, 中文版", "date": "2020-12-11 00:00:00 +0800", "snippet": "向着色器添加纹理 通过纹理，可以很容易让着色器变得生动起来，获得非常真实的效果。为了更有效的使用纹理，我们需要了解一张2D图片是如何映射到3D模型中去的。 这个映射的过程称之为纹理贴图texture mapping，为了完成映射，我们在使用的模型和着色器上还有额外的工作。模型实际上是由很多的三角形拼接而成的；而三角形的每个顶点都保存有着色器可以访问的各种数据。 其中很重要的一个信息就是UV信息 (UV data)。 它包含两个坐标，U和V，其取值范围是0到1。这两者表示2D图片的像素点坐标的XY位置信息，而这些信息将会映射到顶点中去。 UV数据只为顶点表示[意思可能也等价于：UV数据只存..." }, { "title": "使用包组数组", "url": "/game-tech-post/posts/%E4%BD%BF%E7%94%A8%E5%8C%85%E7%BB%84%E6%95%B0%E7%BB%84/", "categories": "shader", "tags": "U3D, Shader, Cookbook, 中文版", "date": "2020-12-09 00:00:00 +0800", "snippet": "使用包组[包装组织]笼统的讲，显示器上每一个像素点都至少会执行一次。这也是为什么GPU要设计高度优化的并行架构的原因。同样的在Cg语言的标准变量类型和操作符中，这种设计哲学也很明显。理解它们，不仅仅是为了正确的使用着色器，同时也是为了能够写出更高效的着色器。 操作步骤 在Cg语言中有两种类型的变量：单精度值single和包组packed arrays。后者很容易辨别因为这种类型通常会以数字结尾，比如float4，int4等等。正如它们的名字所表示的一样，这些类型的变量跟我们编程语言中的结构体structs类似，这也意味着每一个这样的变量包含了多个单精度值。在Cg语言中我们..." }, { "title": "表面着色器和纹理贴图", "url": "/game-tech-post/posts/%E8%A1%A8%E9%9D%A2%E7%9D%80%E8%89%B2%E5%99%A8%E5%92%8C%E7%BA%B9%E7%90%86%E8%B4%B4%E5%9B%BE/", "categories": "shader", "tags": "U3D, Shader, Cookbook, 中文版", "date": "2020-10-24 00:00:00 +0800", "snippet": "第二章 表面着色器和纹理贴图在这一章节，我们将会探索表面着色器的使用。我们会用一个非常简单的磨砂材质开始讲起，然后会在后面讲解全息投影和高级的地形混合。 我们将能够使用纹理制作动画效果，混合等，或者用着色器去驱动我们想要的属性。在这一章你将会学习下面一些表面着色器的使用方法： 漫反射的着色处理 使用包组 向着色器添加纹理 通过改变UV值来移动纹理 法线贴图 创建一个带透明度的材质 创建一个有全息效果的着色器 纹理的压缩和混合 在地形的表面绘制一个圆 ***介绍我们在第一章，创建你的第一个着色器 已经介绍了表面着色器，这是Unity引擎中的主要着色器类型。在这一章我们将更..." }, { "title": "使用表面着色器的属性", "url": "/game-tech-post/posts/%E4%BD%BF%E7%94%A8%E8%A1%A8%E9%9D%A2%E7%9D%80%E8%89%B2%E5%99%A8%E7%9A%84%E5%B1%9E%E6%80%A7/", "categories": "shader", "tags": "U3D, Shader, Cookbook, 中文版", "date": "2020-09-02 00:00:00 +0800", "snippet": "使用表面着色器的属性现在我们已经为着色器创建了一些属性，这里我们将要正式的把这些属性跟着色器关联起来，这些属性就像着色器的调节器一样，可以让材质拥有更好的交互性。我们可以在材质的检查器面板(Inspector tab)使用着色器属性的值，因为我们为这个属性添加了一个变量名，但是如果你在着色器代码中想要通过这个变量名来获得这个值，我们仍然还有很多事情要做。 操作步骤 下面的步骤展示了如何在表面着色器中使用属性： 开始之前，我们先删除下面的行的代码,就好像我们在章节创建一个基本的标准着色器中删除属性的操作步骤一样，删除_MainTex属性： _..." }, { "title": "给着色器添加属性", "url": "/game-tech-post/posts/%E7%BB%99%E7%9D%80%E8%89%B2%E5%99%A8%E6%B7%BB%E5%8A%A0%E5%B1%9E%E6%80%A7/", "categories": "shader", "tags": "U3D, Shader, Cookbook, 中文版", "date": "2020-08-19 00:00:00 +0800", "snippet": "给着色器添加属性着色器的属性对于着色器管线来说时非常重要，因为艺术家或者用户想要添加纹理或者调整着色器的值都是通过著色器的属性来修改的。着色器的属性在材质的检查器面板(Inspector )中会提供GUI，提供图形界面让玩家去调整一个着色器，不用打开额外的编辑器。用Visual Studio Code打开你的着色器代码，从第2行到第7行的代码块就是着色器的属性(Properties )。当前的这个着色器，他会有一个叫_MainTex的属性。如果你查看使用了这个着色器的材质，你能注意到着色器的检查器面板(Inspector )中有一个纹理(texture )的GUI元素。着色器中的这行..." }, { "title": "如何把unity 4的旧着色器迁移至unity 5", "url": "/game-tech-post/posts/%E5%A6%82%E4%BD%95%E6%8A%8AUnity-4%E7%9A%84%E6%97%A7%E7%9D%80%E8%89%B2%E5%99%A8%E8%BF%81%E7%A7%BB%E8%87%B3Unity-5/", "categories": "shader", "tags": "U3D, Shader, Cookbook, 中文版", "date": "2020-08-15 00:00:00 +0800", "snippet": "如何把Unity 4的旧着色器迁移至Unity 5不可否认，在过去10年中图形学在电子游戏中获得了惊人的发展。每一个新游戏带来的尖端技术让我们的游戏画面更加接近现实。随着Unity引擎版本的不断迭代，它的着色器技术也自然而然的经历了相当大的变化。这也是为什第一次接触着色器的时候感到困惑的原因。在Unity5还没有推出之前，Unity自带了两种不同的着色器，分别是：漫反射(Diffuse)和镜面反射(Specular)。正如其名字所描述，它们分别用来模拟表面粗糙和表面光滑的材料。如果你现在使用的Unity5，那么你其实可以跳过这个知识点。该知识点会讲解如何在Unity5中重现这些效果。 ..." }, { "title": "读者反馈", "url": "/game-tech-post/posts/%E8%AF%BB%E8%80%85%E5%8F%8D%E9%A6%88/", "categories": "shader", "tags": "U3D, Shader, Cookbook, 中文版", "date": "2020-08-13 00:00:00 +0800", "snippet": "读者反馈非常欢迎来自各位读者的反馈。这能让我们知道你们是否喜欢这本书。你们给与的重要反馈可以让我们写出更适合且对你们更有帮助的内容。通常最简单的反馈方式是通过feedback@packtpub.com邮箱给我们发邮件，然后在反馈邮件的标题中告诉我们书标题。如果在本书中有你擅长领域的话题想跟我们讨论，或者你愿意把你专长领域的知识贡献给本书，也可以通过这个网址 www.packtpub.com/authors的指引进行操作" }, { "title": "第一章.创建你的第一个着色器", "url": "/game-tech-post/posts/%E7%AC%AC%E4%B8%80%E7%AB%A0.%E5%88%9B%E5%BB%BA%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%9D%80%E8%89%B2%E5%99%A8/", "categories": "shader", "tags": "U3D, Shader, Cookbook, 中文版", "date": "2020-08-13 00:00:00 +0800", "snippet": "第一章 创建你的第一个着色器在这一章我们包含了一些在当今游戏开发着色器管线中更通用的漫反射技术基础。在这一章我们将会学习下面的知识点: 创建一个基础的标准着色器 从Unity4迁移旧着色器至Unity5 为着色器添加属性 在表面着色器中使用属性介绍让我在脑海中想象一个完全由白色绘制立方体。尽管立方体的每一个面的颜色都是相同的，但是由于不同方向的光线照射和我们看这个立方体的角度的不同，我们总能发现立方体不同的白色阴影。这种层级的逼真场景就是通过3D图形学中的着色器实现的，它是一种模拟光的作用原理的特别的程序。一个木质的立方体和一个金属的立方体也许可以是同一种3d模型，之所以让他们看..." }, { "title": "示例代码下载", "url": "/game-tech-post/posts/%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81%E4%B8%8B%E8%BD%BD/", "categories": "shader", "tags": "U3D, Shader, Cookbook, 中文版", "date": "2020-08-13 00:00:00 +0800", "snippet": "示例代码下载通过这个网站http://www.packtpub.com，你可以用自己的账号下载本书的实例代码(其实我本人是建议自己手动敲一遍，我试了一下，代码是可以直接在这个网站下载的，就算你没有购买这本书也是可以的。但是需要注册一个账号才行，然后搜索到这本书，这本书的页面下面就有下载代码的链接)。如果你在别的地方购买了这本书，那么你可以浏览网站 http://www.packtpub.com/support](https://www.packtpub.com/support)注册一个账号，然后在该页面直接通过书名搜索，也能找到这些文件的下载链接。代码文件可以通过下面的步骤获得： ..." }, { "title": "盗版声明", "url": "/game-tech-post/posts/%E7%9B%97%E7%89%88%E5%A3%B0%E6%98%8E/", "categories": "shader", "tags": "U3D, Shader, Cookbook, 中文版", "date": "2020-08-13 00:00:00 +0800", "snippet": "盗版声明在网上，所有媒体的版权资料盗版问题从未停歇。 在Packt网，我们非常重视保护我们的版权和许可证。如果你在英特网上看到任何来自我们工作成果的 非法拷贝，不管来自那里，还请你提供给我们地址或者网址，这样我们可以挽回我们的损失。还请通过copyright@packtpub.com邮箱联系我们。我们非常感激您帮助我们保护作者和保护我们继续给你带来有价值的内容。" }, { "title": "本书的一些文体要求", "url": "/game-tech-post/posts/%E6%9C%AC%E4%B9%A6%E7%9A%84%E4%B8%80%E4%BA%9B%E6%96%87%E4%BD%93%E8%A6%81%E6%B1%82/", "categories": "shader", "tags": "U3D, Shader, Cookbook, 中文版", "date": "2020-08-13 00:00:00 +0800", "snippet": "本书的一些文体说明在书中你可以发现很多种不同的文本样式用来表示不同的信息内容。这里列举几个来解释一下。（需要说明一下的是，我在翻译的过程中，代码的字体样式可能会跟书本上不一样，我主要是用markdown的代码块来表示。然后它的粗体，比如强调，那我就用markdown中的强调标签来表示，说声抱歉了，希望大家能看的懂）代码块，数据库表名，文件夹名字 ，文件名字，文件扩展名，路径名称，虚拟URL（觉得这个翻译不准确），用户输入，推特账号等会按照如下表示：“请输入下面的代码到你的着色器属性块（**Properties **）中”void surf (Input IN, inout Surface..." }, { "title": "本书有问题请联系", "url": "/game-tech-post/posts/%E6%9C%AC%E4%B9%A6%E6%9C%89%E9%97%AE%E9%A2%98%E8%AF%B7%E8%81%94%E7%B3%BB/", "categories": "shader", "tags": "U3D, Shader, Cookbook, 中文版", "date": "2020-08-13 00:00:00 +0800", "snippet": "本书有问题请联系如果您对本书有任何层面的问题，您可以通过邮箱questions@packtpub.com联系我们，我们会尽己所能改善这些问题。" }, { "title": "本书一些彩图的下载", "url": "/game-tech-post/posts/%E6%9C%AC%E4%B9%A6%E4%B8%80%E4%BA%9B%E5%BD%A9%E5%9B%BE%E7%9A%84%E4%B8%8B%E8%BD%BD/", "categories": "shader", "tags": "U3D, Shader, Cookbook, 中文版", "date": "2020-08-13 00:00:00 +0800", "snippet": "本书一些彩图的下载这本书中的彩图，比如说屏幕截图/示意图我们都把他放在了一个PDF文件中。希望这些图片可以让你更好的理解屏幕输出图像的变化。 你可以通过下面的链接下载这个PDF文件https://www.packtpub.com/sites/default/files/downloads/Unity5xShadersAndEffectsCookboo" }, { "title": "客户支持", "url": "/game-tech-post/posts/%E5%AE%A2%E6%88%B7%E6%94%AF%E6%8C%81/", "categories": "shader", "tags": "U3D, Shader, Cookbook, 中文版", "date": "2020-08-13 00:00:00 +0800", "snippet": "客户支持很高心您能拥有此书，为了让您物有所值，我们还为你准备了很多东西（很搞不懂这也要搞一个章节出来，就一句话）。" }, { "title": "勘误表", "url": "/game-tech-post/posts/%E5%8B%98%E8%AF%AF%E8%A1%A8/", "categories": "shader", "tags": "U3D, Shader, Cookbook, 中文版", "date": "2020-08-13 00:00:00 +0800", "snippet": "勘误表尽管我们非常注意本书内容的准确性，但还是会有不小心出错的地方。如果您在我们出版的书中（不限本书）找到了错误，有可能是文字错误或者代码错误，我们非常欢迎您将这些错误报告给我们。如此善举，既解他人之惑，亦可助改善此书。如果您发现任何勘误，请通过链接https://www.packtpub.com/support/errata （原书写的链接失效了）向我们报告。当您的勘误确认后，您提交的勘误将会被接受并且勘误会上传至我们的网站和任何已存在的勘误名单中。 如果您想看看之前的勘误提交，可以访问https://www.packtpub.com/support/code-downloads（原书..." }, { "title": "内容结构", "url": "/game-tech-post/posts/%E5%86%85%E5%AE%B9%E7%BB%93%E6%9E%84/", "categories": "shader", "tags": "U3D, Shader, Cookbook, 中文版", "date": "2020-08-13 00:00:00 +0800", "snippet": "内容结构在本书中， 会经常出现一系列的小标题 (始前准备，操作步骤，原理介绍，额外内容 ，相关补充)。主要功能是对每一个知识点进行说明，如何完成该知识点的掌握。下面说明具体的用法： 始前准备 这个部分会告诉你这个知识点会学习什么，怎么安装和设置对应的软件。 操作步骤 这个部分包含了学习该知识点包含那些步骤。 原理介绍 该部分通常是为了详细解释“操作步骤”这个部分的知识原理，上面的每一步到底做了什么。 额外内容 为了让读者了解更多与该知识点相关的额外知识，我们才准备了这个额外信息让读者阅读。 相关补充..." }, { "title": "本书的适合人群", "url": "/game-tech-post/posts/%E6%9C%AC%E4%B9%A6%E7%9A%84%E9%80%82%E5%90%88%E4%BA%BA%E7%BE%A4/", "categories": "shader", "tags": "U3D, Shader, Cookbook, 中文版", "date": "2020-08-10 00:00:00 +0800", "snippet": "本书的适合人群本书适合色器编程初学者，或者想通过专业的后处理特效让游戏更棒的开发者。当然开发者本身需要对Unity游戏引擎有比较深入的理解。" }, { "title": "学习的过程中你需要准备的", "url": "/game-tech-post/posts/%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%BF%87%E7%A8%8B%E4%B8%AD%E4%BD%A0%E9%9C%80%E8%A6%81%E5%87%86%E5%A4%87%E7%9A%84/", "categories": "shader", "tags": "U3D, Shader, Cookbook, 中文版", "date": "2020-08-10 00:00:00 +0800", "snippet": "学习的过程中你需要准备的下面列举了在学习本书知识的过程中必须的工具软件和可选的工具软件: Unity5引擎 一款3D建模软件，比如Maya，3DMax，或Blender (可选l) 一款2D图片编辑软件，比如PS或者Gimp (可选)" }, { "title": "这本书包含哪些内容", "url": "/game-tech-post/posts/%E8%BF%99%E6%9C%AC%E4%B9%A6%E5%8C%85%E5%90%AB%E5%93%AA%E4%BA%9B%E5%86%85%E5%AE%B9/", "categories": "shader", "tags": "U3D, Shader, Cookbook, 中文版", "date": "2020-08-09 00:00:00 +0800", "snippet": "这本书包含哪些内容第一章,创建你的第一个着色器, 向你介绍如何在unity4和unity5中编写着色器代码（我会试着在unity2018上去实验，保证shader代码的正常执行，不限于unity4和5）。第二章, 表面着色器和纹理贴图, 介绍了一些如何实现表面着色器的通用且实用的技术，比如如何给游戏模型使用纹理和法线贴图。第三章, 理解光照模型，带你深入理解在给模型使用着色器时光带来的影响，这一章会教你一些如何实现自定义的光照模型的技术技巧，以便于你去实现一些独特的特效，比如Toon着色器效果。第四章, Unity 5中基于物理原理的渲染, 这一章为你介绍在unity5中基于物理原理的标..." }, { "title": "电子书 优惠折扣 以及更多信息", "url": "/game-tech-post/posts/%E7%94%B5%E5%AD%90%E4%B9%A6-%E4%BC%98%E6%83%A0%E6%8A%98%E6%89%A3-%E4%BB%A5%E5%8F%8A%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF/", "categories": "shader", "tags": "U3D, Shader, Cookbook, 中文版", "date": "2020-08-06 00:00:00 +0800", "snippet": "电子书, 优惠折扣, 额外信息**Packt **电子书网站拥有包含pdf和ePub格式的所有已经出版的书籍的电子书。你可以在www.PacktPub.com 更新你的电子书版本并且如果你购买过相应的纸质书籍的话，可以在购买对应的电子版本时享有折扣。你可以通过 customercare@packtpub.com 这个邮箱向我们了解优惠的详细信息。你可以在 www.PacktPub.com 阅读一系列免费的技术文章，现在在网站注册可以获知最新的免费和折扣信息https://www2.packtpub.com/books/subscription/packtlib （告诉大家一个不幸的消息，..." }, { "title": "前言", "url": "/game-tech-post/posts/%E5%89%8D%E8%A8%80/", "categories": "shader", "tags": "U3D, Shader, Cookbook, 中文版", "date": "2020-08-06 00:00:00 +0800", "snippet": "前言Unity 5.x Shaders and Effects Cookbook这本书能让你在Unity5引擎中创建着色器和特效更加得心应手，能让你入门起来比较容易，学会创建大部分基础的着色器，并且学会如何组织你的着色器代码。本书的章节安排是循序渐进的，每一章节的基础知识，旨在后面让你能实现更高级的技术技巧，比如实现范围体爆炸效果，毛皮特效等。这本书是专门在Unity5这个游戏引擎下讲解的，希望帮助你掌握诸如基于物理原理的渲染和全局光照等知识，让你尽可能获得照片级的效果。在每一章的结尾，你都会获得一些新的技巧，这些技巧有助于提高你的着色器质量并且让你在写着色器的时候更加有效率。 为了让你..." }, { "title": "为什么订阅", "url": "/game-tech-post/posts/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AE%A2%E9%98%85/", "categories": "shader", "tags": "U3D, Shader, Cookbook, 中文版", "date": "2020-08-06 00:00:00 +0800", "snippet": "为什么希望你订阅?可以查阅所有 Packt网站发布的的书籍可以拷贝，打印所有书籍可以通过浏览器查找你最需要的资料" }, { "title": "Www.packtpub.com", "url": "/game-tech-post/posts/www.PacktPub.com/", "categories": "shader", "tags": "U3D, Shader, Cookbook, 中文版", "date": "2020-08-06 00:00:00 +0800", "snippet": "www.PacktPub.com这是一个电子书的网站，等于是帮这个网站宣传了吧，大家直接点击超链接进去看就行了。一般来说，你只要在上面买了电子书，特别是技术书籍，相关的代码，附件也可以从上面下载。" }, { "title": "鸣谢", "url": "/game-tech-post/posts/%E9%B8%A3%E8%B0%A2/", "categories": "shader", "tags": "U3D, Shader, Cookbook, 中文版", "date": "2020-08-05 00:00:00 +0800", "snippet": "鸣谢本书作者Alan ZucconiKenneth Lammers审稿Kenneth Lammers组稿编辑Priya Singh策划编辑Rahul NairErol Staveley项目内容编辑Mehvash Fatima技术编辑Pranil PathareDanish Shaikh文字编辑Tasneem Fatehi项目助理Kinjal Bari校对员Safis Editing索引员Monica Ajmera Mehta图像Kirk D’PenhaDisha Haria制作协调员Nilesh Mohite封面设计Nilesh Mohite关于作者Alan Zucconi 是一个充满激..." }, { "title": "关于作者", "url": "/game-tech-post/posts/%E5%85%B3%E4%BA%8E%E4%BD%9C%E8%80%85/", "categories": "shader", "tags": "U3D, Shader, Cookbook, 中文版", "date": "2020-08-05 00:00:00 +0800", "snippet": "关于作者Alan Zucconi 是一个充满激情的开发者, 作者, 和一个激励的演讲者, 是开发者领域的佼佼者。 有着过去10年来相关领域的专业技能积累，并且决定在今后把精力都放在学术领域和游戏产业领域。作为一名自由职业者，他以非凡的创造力去探索如何让游戏更好的与艺术结合。 在此之前，他在伦敦帝国理工学院工作，在这里他发现了他教学和写作的激情。 他的头衔包括了 gravity puzzle, 0RBITALIS, 和the upcoming time travel platformer, Still Time（这些单词实在不知道怎么翻译了，应该是游戏名字）.Kenneth Lammer..." } ]
